- name: Create ansible VM
  hosts: localhost
  gather_facts: no
  connection: local
  vars_files: vars/gcp_config.yml

  tasks:
    - name: Create address
      gcp_compute_address:
        name: "{{ gcp_bootstrap_address }}"
        region: "{{ gcp_region }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: address

    - name: Create instance
      gcp_compute_instance:
        name: "{{ gcp_bootstrap_machine_name }}"
        machine_type: "{{ gcp_bootstrap_machine_type }}"
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              disk_name: "{{ gcp_bootstrap_disk }}"
              source_image: "{{ gcp_bootstrap_image }}"
        metadata:
          enable-oslogin: True
        network_interfaces:
          - access_configs:
            - name: 'External NAT'
              nat_ip: "{{ address }}"
              type: 'ONE_TO_ONE_NAT'
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: instance

  post_tasks:
    - name: Wait for SSH to come up
      wait_for: host={{ address.address }} port=22 delay=5 timeout=120

    - name: Add host to groupname
      add_host: hostname={{ address.address }} groupname=launched

    - name: Reset known-hosts for IPs
      command: ssh-keygen -R {{ address.address }}

    - name: Add the new instance as a known host
      shell: ssh-keyscan {{ address.address }} >> ~/.ssh/known_hosts


- name: Set up ansible VM
  hosts: launched
  remote_user: "{{ gcp_admin_user }}"
  become: True
  vars_files:
    - vars/gcp_admin.yml
    - vars/gcp_config.yml

  vars:
    - ansible_ssh_private_key_file: "~/.ssh/{{ gcp_admin_key_file }}"

  tasks:
    - name: Make ansible service account credential directory
      file:
        path: "{{ gcp_cred_file | dirname }}"
        state: directory

    - name: Copy over ansible service account credential file
      copy:
        src: "{{ gcp_cred_file }}"
        dest: "{{ gcp_cred_file }}"

    - name: Create SSH key directory (if it doesn't exist yet)
      file:
        path: "/home/{{ ansible_user }}/.ssh/"
        owner: "{{ ansible_user }}"
        state: directory

    - name: Copy private SSH keys
      copy:
        src: "{{ item }}"
        mode: 400
        owner: "{{ ansible_user }}"
        dest: "/home/{{ ansible_user }}/.ssh/"
      loop:
        - "{{ lookup('env', 'HOME') }}/.ssh/{{ gcp_admin_key_file }}"
        - "{{ lookup('env', 'HOME') }}/.ssh/{{ gcp_service_key_file }}"

    - name: Add github.com as known host
      lineinfile:
        dest: "/home/{{ ansible_user }}/.ssh/known_hosts"
        create: yes
        owner: "{{ ansible_user }}"
        state: present
        line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
        regexp: "^github\\.com"

    - name: Add nodesource signing key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        id: 68576280

    - name: Add nodesource apt repository
      apt_repository:
        repo: deb https://deb.nodesource.com/node_10.x focal main


    - name: Upgrade apt packages to the latest version
      apt:
        upgrade: dist

    - name: Install base apt packages
      apt:
        update_cache: yes
        name:
        - build-essential
        - software-properties-common
        - libssl-dev
        - libffi-dev
        - nodejs
        - git
        - vim
        - python3-dev
        - python3-distutils
        - python3-pip
        state: latest
        autoremove: yes

    - name: Install ansible and other critical packages
      pip:
        extra_args: --no-cache-dir
        executable: pip3
        name:
          - ansible
          - apache-libcloud
          - google-auth
          - pyopenssl

    - name: Sync latest deployment scripts
      git:
        repo: https://github.com/PencilCode/deployment
        dest: "/home/{{ ansible_user }}/deployment"
        version: pencil-io
