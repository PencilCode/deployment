- name: Create ansible VM
  hosts: localhost
  gather_facts: no
  connection: local
  vars_files: vars/gcp_config.yml

  tasks:
    - name: Create disk
      gcp_compute_disk:
        name: 'pc-ansible-disk'
        source_image: "{{ gcp_bootstrap_image }}"
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: disk

    - name: Create address
      gcp_compute_address:
        name: 'pc-ansible-address'
        region: "{{ gcp_region }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: address

    - name: Create instance
      gcp_compute_instance:
        name: "{{ gcp_bootstrap_machine_name }}"
        machine_type: "{{ gcp_bootstrap_machine_type }}"
        disks:
          - auto_delete: true
            boot: true
            source: "{{ disk }}"
        metadata:
          enable-oslogin: True
        network_interfaces:
#          - network: null # use default
           - access_configs:
              - name: 'External NAT'
                nat_ip: "{{ address }}"
                type: 'ONE_TO_ONE_NAT'
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: instance

    - name: Wait for SSH to come up
      wait_for: host={{ address.address }} port=22 delay=5 timeout=120

    - name: Add host to groupname
      add_host: hostname={{ address.address }} groupname=launched

    - name: Reset known-hosts for IPs
      command: ssh-keygen -R {{ address.address }}

    - name: Add the new instance as a known host
      shell: ssh-keyscan {{ address.address }} >> ~/.ssh/known_hosts


- name: Set up ansible VM
  hosts: launched
  connection: ssh
  remote_user: "{{ gcp_service_user }}"
  become: yes

  vars_files: vars/gcp_config.yml

  vars:
    - ansible_ssh_private_key_file: "~/.ssh/{{ gcp_service_user }}"

  tasks:
    # Set up the user and copy over keys, host information, etc.
    - name: Create admin user account (if it doesn't exist yet)
      user:
        name: "{{ gcp_admin_user }}"
        groups: sudo
        append: yes
        state: present
      register: admin_user

    - name: Create SSH key directory (if it doesn't exist yet)
      file:
        path: "{{ admin_user.home }}/.ssh"
        state: directory
      become_user: "{{ admin_user.name }}"

    - name: Copy service account private SSH key
      become_user: "{{ admin_user.name }}"
      copy: src={{ ansible_ssh_private_key_file }} mode=400
            dest="{{ admin_user.home }}/.ssh/{{ gcp_service_user }}"

    - name: Add github.com as known host
      lineinfile:
        dest: "{{ admin_user.home }}/.ssh/known_hosts"
        create: yes
        state: present
        line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
        regexp: "^github\\.com"
      become_user: "{{ admin_user.name }}"

    - name: Make ansible service account credential directory
      file:
        path: "{{ gcp_cred_file | dirname }}"
        state: directory

    - name: Copy over ansible service account credential file
      copy:
        content: "{{ gcp_cred_file }}"
        dest: "{{ gcp_cred_file }}"

    - name: Install https support for apt
      apt: name=apt-transport-https update_cache=yes

    - name: Upgrade apt packages to the latest version
      apt: upgrade=dist

    - name: Add nodesource signing key
      apt_key: >
        url=https://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0x1655A0AB68576280
        id=68576280

    - name: Add nodesource apt repository
      apt_repository: >
        repo='deb https://deb.nodesource.com/node_0.12 wheezy main'

    - name: Upgrade apt packages to the latest version
      apt: upgrade=dist

    - name: Install apt packages
      apt: pkg={{ item }} state=latest
      with_items:
        - build-essential
        - python-setuptools
        - python-dev
        - python-openssl
        - python-pip
        - libssl-dev
        - libffi-dev
        - nodejs
        - git
        - vim
        - bash-completion

    - name: Install ansible
      pip:
        extra_args: --no-cache-dir
        name:
          - ansible
          - apache-libcloud

    - name: Sync {{ dir }} to latest deployment scripts
      git: >
        repo=git@github.com:PencilCode/deployment.git
        dest={{ admin_user.home }}/deployment
      become_user: "{{ admin_user.name }}"

#    - name: Copy over miscellaneous helpful files
      become: no
      copy: src={{ admin_user.home }}/{{ item }}
            dest={{ admin_user.home }}/{{ item }}
      with_items:
#       - .ansible_vault_password
       - .gitconfig
