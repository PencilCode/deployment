- name: Create web instances
  hosts: localhost
  gather_facts: no
  connection: local
  vars_files: vars/gcp_config.yml

  tasks:
    # Outside-facing address for load balancer
    - name: Create address
      gcp_compute_address:
        name: "{{ gcp_web_address }}"
        region: "{{ gcp_region }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: address

    # Template to generate instances from (for load balancing spin-up / down)
    - name: Create instances
      gcp_compute_instance:
        name: "{{ gcp_web_instance }}-{{ item }}"
        machine_type: "{{ gcp_web_machine_type }}"
        disks:
          - auto_delete: 'true'
            boot: 'true'
            initialize_params:
              disk_name: "{{ gcp_web_disk }}-{{ item }}"
              source_image: "{{ gcp_web_image }}"
          - auto_delete: 'false'
            boot: 'false'
            device_name: "{{ gcp_web_disk }}-{{ item }}-log"
            initialize_params:
              disk_name: "{{ gcp_web_disk }}-{{ item }}-log"
              disk_size_gb: 20
        metadata:
          enable-oslogin: True
        network_interfaces:
          - access_configs:
            - name: 'External NAT'
              nat_ip: "{{ address }}"
              type: 'ONE_TO_ONE_NAT'
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}" 
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
        state: present
        tags:
          items: webserver,http-server,https-server
      loop: "{{ range(0, 2) | list }}"
      register: instancedata

    - name: Create instance group
      google.cloud.gcp_compute_instance_group:
        name: "{{ ansible_web_group }}"
        instances: instancedata.results
        network: "{{ network }}"
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}" 
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
        state: present
      register: instancegroup


    # Specification for checking on the health of the servers
    - name: Create HTTP health check
      gcp_compute_http_health_check:
        name: "{{ gcp_web_healthcheck }}"
        host: "{{ gcp_web_healthcheck_host }}"
        port: 80
        request_path: "{{ gcp_web_healthcheck_path }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
        state: present
      register: healthcheck

    # The backend service itself, which will direct traffic to instances
    - name: create a backend service
      gcp_compute_backend_service:
        name: "{{ gcp_web_service }}"
        backends:
        - group: "{{ instancegroup }}"
        health_checks:
        - "{{ healthcheck.selfLink }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: webservice

  post_tasks:
    # TODO: Make sure we wait for all instances to be created. (Something might be delaying them...)
    # Once the instances have spun up (intially), gather info on them.
    - name: Gather data on instances in group
      gcp_compute_instance_info:
        filters:
        - name = {{ gcp_web_instance }}-*
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}" 
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: instancedata

    # Make sure the machines are booted before doing anything else
    - name: Wait for service SSH to come up
      wait_for: host={{ address.address }} port=22 delay=5 timeout=120

    # NOTE: instances won't work remotely - this must be done from the instance's network!
    - name: Wait for SSH of instances to come up
      wait_for: host={{ item.name }} port=22 delay=5 timeout=120
      with_items: "{{ instancedata.resources }}"

    # Set up SSH files / variables / etc
    - name: Reset known-hosts for service IP
      command: ssh-keygen -R {{ address.address }}

    - name: Add the new service as a known host
      shell: ssh-keyscan {{ address.address }} >> ~/.ssh/known_hosts

    - name: Reset known-hosts for instance IPs
      command: ssh-keygen -R {{ item.name }}
      with_items: "{{ instancedata.resources }}"

    - name: Add the instances as a known hosts
      shell: ssh-keyscan {{ item.name }} >> ~/.ssh/known_hosts
      with_items: "{{ instancedata.resources }}"

    - name: Add instance hosts to groupname
      add_host: hostname={{ item.name }} groupname=launched
      with_items: "{{ instancedata.resources }}"


# Set up the the disks for the instances.
- name: Set up disks
  hosts: launched
  connection: ssh
  remote_user: "{{ gcp_service_user }}"
  become: yes
  vars_files: vars/gcp_config.yml

  vars:
    - ansible_ssh_private_key_file: "~/.ssh/{{ gcp_admin_key_file }}"

  tasks:

    - name: Set up filesystem for log disks
      filesystem:
        fstype: ext4
        dev: /dev/disk/by-id/google-{{ gcp_web_instance }}-log
        opts: "-E lazy_itable_init=0,lazy_journal_init=0,discard"

    - name: Mount log disks
      mount:
        path: /var/log
        fstype: ext4
        src: /dev/disk/by-id/google-{{ gcp_web_instance }}-log
        state: mounted
      notify: restart rsyslog

    - name: Install nfs client
      apt:
        update_cache: yes
        name:
        - nfs-common
        state: latest

    - name: Mount data disk
      mount: 
        path: /mnt/datadisk
        fstype: nfs
        src: "{{ gcp_nfs_machine_name }}:/data"
        opts: rw,sync,nfsvers=3
        state: mounted

  handlers:
    - name: restart rsyslog
      service: name=rsyslog state=restarted

