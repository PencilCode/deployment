- name: Create instance(s)
  hosts: localhost
  gather_facts: no
  connection: local

  vars:
    machine_type: n1-standard-1 # default
    image: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1604-xenial-v20161221
    service_account_email: 670662678080-v4dlk7smudbfr0rbc2n5mcb2mnsdbqpb@developer.gserviceaccount.com
    pem_file: /etc/ansible/keys/service-key.pem
    project_id: paris-code

  tasks:
    - name: Launch instances
      gce:
          instance_names: web1,web2
          machine_type: "{{ machine_type }}"
          image: "{{ image }}"
          service_account_email: "{{ service_account_email }}"
          pem_file: "{{ pem_file }}"
          project_id: "{{ project_id }}"
          tags: webserver
      register: gce

    - name: Create log disks
      gce_pd:
          name: "{{ item.name }}-log-1"
          instance_name: "{{ item.name }}"
          mode: READ_WRITE
          size_gb: 20
          service_account_email: "{{ service_account_email }}"
          pem_file: "{{ pem_file }}"
          project_id: "{{ project_id }}"
          zone: "{{ item.zone }}"
      with_items: "{{ gce.instance_data }}"

    - name: Assemble qualified instance names
      shell: echo {{ item.zone }}/{{ item.name }}
      with_items: "{{ gce.instance_data }}"
      register: qnames

    - name: Create load balancing rule
      gce_lb:
        name: lb
        external_ip: pencilcode-ip
        region: us-central1
        members: "{{ qnames.results|map(attribute='stdout')|list }}"
        httphealthcheck_name: lb-check
        httphealthcheck_host: pencil.io
        httphealthcheck_port: 80
        httphealthcheck_path: "/load/first"
        service_account_email: "{{ service_account_email }}"
        pem_file: "{{ pem_file }}"
        project_id: "{{ project_id }}"

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=5 timeout=60
      with_items: "{{ gce.instance_data }}"

    - name: Add host to groupname
      add_host: hostname={{ item.public_ip }} groupname=launched
      with_items: "{{ gce.instance_data }}"

    - name: reset known-hosts for ips
      command: ssh-keygen -R {{ item.public_ip }}
      with_items: "{{ gce.instance_data }}"

    - name: registering new known-host for ips
      shell: ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts
      with_items: "{{ gce.instance_data }}"

    - name: reset known-hosts for ips
      command: ssh-keygen -R {{ item.private_ip }}
      with_items: "{{ gce.instance_data }}"

    - name: registering new known-host for ips
      shell: ssh-keyscan -H {{ item.private_ip }} >> ~/.ssh/known_hosts
      with_items: "{{ gce.instance_data }}"

    - name: reset known-hosts for names
      command: ssh-keygen -R {{ item.name }}
      with_items: "{{ gce.instance_data }}"

    - name: registering new known-host for names
      shell: ssh-keyscan -H {{ item.name }} >> ~/.ssh/known_hosts
      with_items: "{{ gce.instance_data }}"

- name: Set up disks
  hosts: launched
  connection: ssh
  become: yes
  tasks:
    - name: Set up filesystem for log disks
      filesystem: >
        fstype=ext4
        dev=/dev/disk/by-id/google-{{ ansible_hostname }}-log-1
        opts="-E lazy_itable_init=0,lazy_journal_init=0"

    - name: Mount log disks
      mount: >
        name=/var/log
        fstype=ext4
        src=/dev/disk/by-id/google-{{ ansible_hostname }}-log-1
        state=mounted
      notify: restart rsyslog

    - name: install nfs client
      apt: pkg=nfs-common state=present

    - name: Mount data disk
      mount: >
        name=/mnt/datadisk
        fstype=nfs
        src=nfs:/data
        opts=rw,sync,nfsvers=3
        state=mounted

  handlers:
    - name: restart rsyslog
      service: name=rsyslog state=restarted

