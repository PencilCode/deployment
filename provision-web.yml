- name: Create Web VM
  hosts: localhost
  gather_facts: no
  connection: local
  vars_file: vars/gcp_config.yml

  tasks:
    # - name: Launch instances
    #   gce:
    #       instance_names: web1,web2
    #       machine_type: "{{ machine_type }}"
    #       image: "{{ image }}"
    #       service_account_email: "{{ service_account_email }}"
    #       credentials_file: "{{ credentials_file }}"
    #       project_id: "{{ project_id }}"
    #       tags: webserver,http-server,https-server
    #   register: gce

    - name: Create base disk
      gcp_compute_disk:
        name: "{{ gcp_web_disk }}"
        source_image: "{{ gcp_web_image }}"
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: disk1

    - name: Create log disk
      gcp_compute_disk:
        name: "{{ gcp_nfs_disk }}-log-1"
        size_gb: 20
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: disk2
    
    - name: Create address
      gcp_compute_address:
        name: "{{ gcp_web_address }}"
        region: "{{ gcp_region }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
      register: address

    - name: Create instance
      gcp_compute_instance:
        name: "{{ gcp_web_machine_name }}"
        machine_type: "{{ gcp_web_machine_type }}"
        disks:
          - auto_delete: true
            boot: true
            source: "{{ disk1 }}"
          - auto_delete: true
            boot: false
            source: "{{ disk2 }}"
        metadata:
          enable-oslogin: True
        network_interfaces:
           - access_configs:
              - name: 'External NAT'
                nat_ip: "{{ address }}"
                type: 'ONE_TO_ONE_NAT'
        zone: "{{ gcp_zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes: "{{ gcp_scopes }}"
        tags: webserver,http-server,https-server
      register: instance

    # - name: Assemble qualified instance names
    #   shell: echo {{ item.zone }}/{{ item.name }}
    #   with_items: "{{ gce.instance_data }}"
    #   register: qnames

    # - name: Create load balancing rule
    #   gce_lb:
    #     name: lb
    #     external_ip: pencilcode-ip
    #     region: us-central1
    #     members: "{{ qnames.results|map(attribute='stdout')|list }}"
    #     httphealthcheck_name: lb-check
    #     httphealthcheck_host: pencil.io
    #     httphealthcheck_port: 80
    #     httphealthcheck_path: "/load/first"
    #     service_account_email: "{{ service_account_email }}"
    #     credentials_file: "{{ credentials_file }}"
    #     project_id: "{{ project_id }}"

    # https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_compute_backend_service_module.html
    - name: create a HTTP health check
      gcp_compute_http_health_check:
        name: httphealthcheck-backendservice
        healthy_threshold: 10
        port: 80
        timeout_sec: 2
        unhealthy_threshold: 5
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        state: present
      register: healthcheck

    - name: Wait for SSH to come up
      wait_for: host={{ address.address }} port=22 delay=5 timeout=120

    - name: Add host to groupname
      add_host: hostname={{ address.address }} groupname=launched

    - name: Reset known-hosts for IPs
      command: ssh-keygen -R {{ address.address }}

    - name: Add the new instance as a known host
      shell: ssh-keyscan {{ address.address }} >> ~/.ssh/known_hosts

- name: Set up disks
  hosts: launched
  connection: ssh
  become: yes
  remote_user: "{{ gcp_service_user }}"
  vars_files: vars/gcp_config.yml

  vars:
    - ansible_ssh_private_key_file: "~/.ssh/{{ gcp_service_user }}"

  tasks:

    - name: Make ansible service account credential directory
      file:
        path: "{{ gcp_cred_file | dirname }}"
        state: directory

    - name: Copy over ansible service account credential file
      copy:
        content: "{{ gcp_cred_file }}"
        dest: "{{ gcp_cred_file }}"

    - name: Create SSH key directory (if it doesn't exist yet)
      file:
        path: "/home/{{ gcp_service_user }}/.ssh"
        owner: "{{ gcp_service_user }}"
        state: directory

    - name: Copy service account private SSH key
      copy:
        src: "{{ ansible_ssh_private_key_file }}"
        mode: 400
        owner: "{{ gcp_service_user }}"
        dest: "/home/{{ gcp_service_user }}/.ssh/{{ gcp_service_user }}"
    
    - name: Set up filesystem for log disks
      filesystem:
        fstype: ext4
        dev: /dev/disk/by-id/google-persistent-disk-1
        opts: "-E lazy_itable_init=0,lazy_journal_init=0,discard"

    - name: Mount log disks
      mount:
        path: /var/log
        fstype: ext4
        src: /dev/disk/by-id/google-persistent-disk-1
        state: mounted
      notify: restart rsyslog

    - name: install nfs client
      apt: pkg=nfs-common state=present

    - name: Mount data disk
      mount: 
        path: /mnt/datadisk
        fstype: nfs
        src: nfs:/data
        opts: rw,sync,nfsvers=3
        state: mounted

  handlers:
    - name: restart rsyslog
      service: name=rsyslog state=restarted

